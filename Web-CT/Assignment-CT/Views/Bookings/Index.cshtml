@model IEnumerable<Assignment_CT.Models.Booking>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>The number of different doctors' bookings</h3>

@if (User.IsInRole("admin"))
{
    <!-- Create a div where the graph will take place -->
    <button onclick="showBookings()">Booking numbers of different Doctors</button>
    <button onclick="showRatings()">Rate values of different Doctors</button>

    <div id="my_dataviz"></div>
}


<h2>Bookings</h2>

@if (User.IsInRole("admin") || User.IsInRole("Patient"))
{
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
}
@if (User.IsInRole("Doctor"))
{
    <p>
        @Html.ActionLink("Bulk Email", "BulkEmail")
    </p>
}
<table class="table" id="datatable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.AppointmentDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            @if (User.IsInRole("Patient"))
            {
                <th>
                    @Html.DisplayNameFor(model => model.Rated)
                </th>

            }
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.AppointmentDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                @if (User.IsInRole("Patient"))
                {
                    <td>
                        <input type="checkbox" @(item.Rated ? "checked='checked'" : "") disabled="disabled" />
                    </td>
                }
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.BookingId })
                @if (User.IsInRole("admin"))
                {
                    <span> | </span>
                    @Html.ActionLink("Edit", "Edit", new { id = item.BookingId })
                    <span> | </span>
                    @Html.ActionLink("Cancel", "Delete", new { id = item.BookingId })
                }
                @if (User.IsInRole("Patient") && item.AppointmentDate > DateTime.Now)
                {
                    <span> | </span>
                    @Html.ActionLink("Cancel", "Delete", new { id = item.BookingId })
                }
                @if (User.IsInRole("Patient") && !item.Rated)
                {
                    <span> | </span>
                    @Html.ActionLink("Rate", "Rate", new { id = item.BookingId })
                }

            </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.AppointmentDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th></th>
        </tr>
    </tfoot>

</table>

<a href="/Bookings/ExportPDF" class="btn btn-success">Download PDF</a>
<a href="/Bookings/ExportToExcel" class="btn btn-success">Download Excel</a>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/datatable")
<script src="https://d3js.org/d3.v4.js"></script>
@section scripts{
    <script>
        $(document).ready(function () {
            let table = new DataTable('#datatable');

        })
    </script>
    <script>
        var data1 = []
        var data2 = []
        $(document).ready(function () {
            // Fetch the data from the server
            $.ajax({
                url: '@Url.Action("DoctorBookingsChartData")',
                method: 'GET',
                success: function(data) {
                    // Transform the data if needed (e.g., replace DoctorId with DoctorName)
                    data1 = data.map(function(item) {
                        return {
                            group: item.DoctorName,  // Replace with doctor's name if possible
                            value: item.Count
                        };
                    });
                    data2 = data.map(function (item) {
                        return {
                            group: item.DoctorName,
                            value: item.AverageRating
                        };
                    });
                    update(data1);
                }
            });
        });

    </script>
    <script>
        function showBookings() {
            update(data1, "#69b3a2");
        }

        function showRatings() {
            update(data2, "#4287f5");
        }



        // set the dimensions and margins of the graph
        var margin = { top: 30, right: 30, bottom: 70, left: 60 },
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Initialize the X axis
        var x = d3.scaleBand()
            .range([0, width])
            .padding(0.2);
        var xAxis = svg.append("g")
            .attr("transform", "translate(0," + height + ")")

        // Initialize the Y axis
        var y = d3.scaleLinear()
            .range([height, 0]);
        var yAxis = svg.append("g")
            .attr("class", "myYaxis")


        // A function that create / update the plot for a given variable:
        function update(data, color = "#69b3a2") {

            // Update the X axis
            x.domain(data.map(function (d) { return d.group; }))
            xAxis.call(d3.axisBottom(x))

            // Update the Y axis
            y.domain([0, d3.max(data, function (d) { return d.value })]);
            yAxis.transition().duration(1000).call(d3.axisLeft(y));

            // Create the u variable
            var u = svg.selectAll("rect")
                .data(data)

            u
                .enter()
                .append("rect") // Add a new rect for each new elements
                .merge(u) // get the already existing elements as well
                .transition() // and apply changes to all of them
                .duration(1000)
                .attr("x", function (d) { return x(d.group); })
                .attr("y", function (d) { return y(d.value); })
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return height - y(d.value); })
                .attr("fill", color)

            // If less group in the new dataset, I delete the ones not in use anymore
            u
                .exit()
                .remove()
        }

        // Initialize the plot with the first dataset
        update(data1);

    </script>
}
